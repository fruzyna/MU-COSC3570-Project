install.packages('astsr')
install.packages()
install.packages('astsa')
require(astsa)
x[0] = 1
x = c(1,2,5,6)
x
x[1]
x[4] #6
require(astsa)
require(astsa)
# create array with column
x = c(1,2,5,6)
x[4] #6
5 * x
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
jj
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
# astsa book data
# jj, Johnson & Johnson Quarterly Earnings
jj['Qtr1']
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
# astsa book data
# jj, Johnson & Johnson Quarterly Earnings
jj
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
# global temperature
plot(gtemp, type='o', ylab='Global Temperature')
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
#random numbers
w = rnorm(500, 0, 1) # 500 numbers from 0 to 1
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan25.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan30.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan30.R', echo=TRUE)
y = filter(w, c(rep(1/10, 10))) # moving average
source('~/Code/Class/MU-MATH4760/jan30.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan30.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan30.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan30.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/jan30.R', echo=TRUE)
# January In Class Notes
require(astsa)
source('~/Code/Class/MU-MATH4760/jan30.R', echo=TRUE)
# simulating random walk
w = rnorm(1000, 0, 1)
s = cumsum(w) # adds up every previous w (s3 = w1 + w2 + w3 = s2 + w3)
par(mfrow=c(2,1))
plot.ts(w, main="Unfiltered")
plot.ts(s, main="Moving Average")
# simulating random walk
w = rnorm(1000, 0, 1)
s = cumsum(w) # adds up every previous w (s3 = w1 + w2 + w3 = s2 + w3)
par(mfrow=c(2,1))
plot.ts(w, main="Unfiltered")
plot.ts(s, main="Random Walk")
# simulating autoregressive process
w = rnorm(550, 0, 1)
x = filter(w, filter=c(0,9), method="recursive")[-(1:50)]
par(mfrow=c(2,1))
plot.ts(w, main="Unfiltered")
plot.ts(s, main="Autoregressive")
x = filter(w, filter=c(0.9), method="recursive")[-(1:50)]
# simulating autoregressive process
# X_t = 0.9 X_(t-1) + W_t
w = rnorm(550, 0, 1)
x = filter(w, filter=c(0.9), method="recursive")[-(1:50)]
par(mfrow=c(2,1))
plot.ts(w, main="Unfiltered")
plot.ts(s, main="Autoregressive")
# simulating autoregressive process
# X_t = 0.9 X_(t-1) + W_t
w = rnorm(550, 0, 1)
x = filter(w, filter=c(0.9), method="recursive")[-(1:50)]
par(mfrow=c(2,1))
plot.ts(w, main="Unfiltered")
plot.ts(x, main="Autoregressive")
# simulating moving average process MA(1)
# X_t = W_t + 0.9 W_(t-1)
w = rnorm(550, 0, 1)
x = filter(w, filter=c(1, 0.9), method="convolution")[-(1:50)]
par(mfrow=c(2,1))
plot.ts(w, main="Unfiltered")
plot.ts(x, main="Moving Average")
# simulating autoregressive process AR(1)
# X_t = 0.9 X_(t-1) + W_t
w = rnorm(550, 0, 1)
x = filter(w, filter=c(0.9), method="recursive")[-(1:50)] # filter and remove first 50 observations
par(mfrow=c(2,1))
plot.ts(w, main="Unfiltered")
plot.ts(x, main="Autoregressive")
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
par(mfrow = c(3,1))
plot(cmort, main='Cardiovascular Mortailiy')
plot(tempr, main='Temperature')
plot(part, main='Particulates')
plot(tempr, cmort)
plot(part, cmort)
pairs(cbind(cmort, tempr, part))
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
tfit <- lm(cmort ~ tempr)
plot(tempr, cmort)
abline(tfit)
plot(part, cmort)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/feb1.R', echo=TRUE)
install.packages('tidyverse')
install.packages('tidyverse')
install.packages('tidyverse')
library(tidyverse)
install.packages('vim')
install.packages('VIM')
library(VIM)
source('~/Code/Class/MU-MATH4760/Notes/feb27.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/Notes/feb27.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/Notes/feb27.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/Notes/feb27.R', echo=TRUE)
source('~/Code/Class/MU-MATH4760/Notes/feb27.R', echo=TRUE)
plot.ts(rec)
?rec
source('~/Code/Class/MU-MATH4760/Notes/feb27.R', echo=TRUE)
plot.ts(rec)
acf(rec)
pacf(rec)
arfit = ar.ols(rec, order=2, demean=FALSE, intercept=TRUE)
arfit
fore = predict(arfit, n.ahead=20)
ts.plot(rec, fore$pred, col=1:2, xlim=c(1980,1990), ylab='Recruitment')
lines(fore$pred, type='p', col=2)
lines(fore$pred + fore$se, lty='dashed', col=4)
lines(fore$pred - fore$se, lty='dashed', col=4)
ts.plot(rec, fore$pred, col=1:2, xlim=c(1980,1990), ylab='Recruitment')
source('~/Dropbox/3570-Final-Project/missing_data.R', echo=TRUE)
setwd("~/Dropbox/3570-Final-Project")
source('~/Dropbox/3570-Final-Project/missing_data.R', echo=TRUE)
source('~/Dropbox/3570-Final-Project/missing_data.R', echo=TRUE)
source('~/Dropbox/3570-Final-Project/missing_data.R', echo=TRUE)
crime <- read.csv('data/crimes.csv')
md.pattern(crime)
