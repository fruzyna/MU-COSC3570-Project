plot.ts(w, main="Unfiltered")
plot.ts(w, main="Unfiltered")
plot.ts(xa, main="Moving Average (-0.9)")
plot.ts(xd, main="Moving Average (0.9)")
plot.ts(xb, main="Moving Average (-0.1)")
plot.ts(xc, main="Moving Average (0.1)")
s = c(rep(0,100), 10*exp(-(1:100)/20)*cos(2*pi*101:200/4))
x = ts(s + rnorm(200, 0, 1))
par(mfrow=c(1,1))
plot.ts(x, main="Signal-Plus-Noise Model")
z = rnorm(100, 0, 1)
x = filter(z, filter=c(0, 0.9), method="recursive")
v = filter(x, filter=rep(1/4, 4), method="convolution")
par(mfrow=c(3, 1))
plot.ts(z, main="Unfiltered")
plot.ts(x, main="Autoregressive")
plot.ts(v, main="Moving Average")
z = rnorm(100, 0, 1)
x = cos(2*pi*1:100/4)
v = filter(x, filter=rep(1/4, 4), method="convolution")
par(mfrow=c(3, 1))
plot.ts(z, main="Unfiltered")
plot.ts(x, main="Autoregressive")
plot.ts(v, main="Moving Average")
z = rnorm(100, 0, 1)
x = cos(2*pi*1:100/4) + z
v = filter(x, filter=rep(1/4, 4), method="convolution")
par(mfrow=c(3, 1))
plot.ts(z, main="Unfiltered")
plot.ts(x, main="Autoregressive")
plot.ts(v, main="Moving Average")
z = rnorm(700, 0, 1)
xa = filter(z, filter=c(-0.9), method="recursive")[-(1:100)]
xb = filter(z, filter=c(-0.1), method="recursive")[-(1:100)]
xc = filter(z, filter=c(0.1), method="recursive")[-(1:100)]
xd = filter(z, filter=c(0.9), method="recursive")[-(1:100)]
par(mfrow=c(3, 2))
plot.ts(z, main="Unfiltered")
plot.ts(z, main="Unfiltered")
plot.ts(xa, main="Autoregressive (-0.9)")
plot.ts(xd, main="Autoregressive (0.9)")
plot.ts(xb, main="Autoregressive (-0.1)")
plot.ts(xc, main="Autoregressive (0.1)")
z = rnorm(500, 0, 1)
xa = filter(z, filter=c(1, -0.9, 0.4), method="convolution")
xb = filter(z, filter=c(1, -0.1, 0.4), method="convolution")
xc = filter(z, filter=c(1, 0.1, 0.4), method="convolution")
xd = filter(z, filter=c(1, 0.9, 0.4), method="convolution")
par(mfrow=c(3, 2))
plot.ts(z, main="Unfiltered")
plot.ts(z, main="Unfiltered")
plot.ts(xa, main="Moving Average (-0.9)")
plot.ts(xd, main="Moving Average (0.9)")
plot.ts(xb, main="Moving Average (-0.1)")
plot.ts(xc, main="Moving Average (0.1)")
s = c(rep(0,100), 10*exp(-(1:100)/20)*cos(2*pi*101:200/4))
x = ts(s + rnorm(200, 0, 1))
par(mfrow=c(1,1))
plot.ts(x, main="Signal-Plus-Noise Model")
z = rnorm(100, 0, 1)
x = filter(z, filter=c(0, 0.9), method="recursive")
v = filter(x, filter=rep(1/4, 4), method="convolution")
par(mfrow=c(3, 1))
plot.ts(z, main="Unfiltered")
plot.ts(x, main="Autoregressive")
plot.ts(v, main="Moving Average")
z = rnorm(100, 0, 1)
x = cos(2*pi*1:100/4)
v = filter(x, filter=rep(1/4, 4), method="convolution")
par(mfrow=c(3, 1))
plot.ts(z, main="Unfiltered")
plot.ts(x, main="Autoregressive")
plot.ts(v, main="Moving Average")
z = rnorm(100, 0, 1)
x = cos(2*pi*1:100/4) + z
v = filter(x, filter=rep(1/4, 4), method="convolution")
par(mfrow=c(3, 1))
plot.ts(z, main="Unfiltered")
plot.ts(x, main="Autoregressive")
plot.ts(v, main="Moving Average")
install.package('Tidyverse')
install.package('tidyverse')
install.packages('tidyverse')
install.packages('tidyverse')
abs(polyroot(c(1, -0.8, 1.5, -1.8)))
library(astsa)
plot.ts(prodn)
acf2(prodn) # nonstationary
# remove seasonal trend with diff
xprod = diff(prodn)
plot.ts(so2)
library(astsa)
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
log = log(so2)
difflog = diff(log)
plot.ts(difflog)
plot.ts(diff)
plot.ts(difflog)
plot.ts(so2)
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
log = log(so2)
difflog = diff(log)
plot.ts(difflog)
sarima(so2, 4, 1, 7)
sarima.for(so2, 20, 4, 1, 7)
plot.ts(oil)
plot.ts(oil)
acf2(oil)
diff = diff(oil)
plot.ts(diff)
acf2(diff)
log = log(oil)
difflog = diff(log)
plot.ts(difflog)
# 1 SO2
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
log = log(so2)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(so2, 3, 1, 7)
sarima.for(so2, 20, 3, 1, 7)
# 2 OIL
plot.ts(oil)
acf2(oil)
diff = diff(oil)
plot.ts(diff)
acf2(diff)
log = log(oil)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(oil, 1, 1, 3)
sarima.for(oil, 20, 1, 1, 3)
sarima(oil, 1, 1, 1)
sarima.for(oil, 20, 1, 1, 1)
sarima(oil, 1, 1, 3)
sarima.for(oil, 20, 1, 1, 3)
# 3 GTEMP
plot.ts(gtemp)
acf2(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
log = log(gtemp)
difflog = diff(log)
log = log(gtemp)
sarima(gtemp, 1, 1, 3)
sarima.for(gtemp, 20, 1, 1, 3)
# 4 JJ
plot.ts(jj)
acf2(jj)
diff = diff(jj)
plot.ts(diff)
acf2(diff)
log = log(jj)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(jj, 5,1,1, 1,1,1, 4)
sarima.for(jj, 20, 5,1,1, 1,1,1, 4)
sarima(jj, 4,1,1, 1,1,1, 4)
sarima.for(jj, 20, 4,1,1, 1,1,1, 4)
# 1 SO2
plot.ts(so2)
# 1 SO2
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
sqrt = sqrt(so2)
diffsqrt = diff(sqrt)
plot.ts(diffsqrt)
acf2(diffsqrt)
sarima(so2, 3, 1, 7)
sarima.for(so2, 20, 3, 1, 7)
# 2 OIL
plot.ts(oil)
acf2(oil)
diff = diff(oil)
plot.ts(diff)
acf2(diff)
log = log(oil)
difflog = diff(log)
plot.ts(difflog)
# 3 GTEMP
plot.ts(gtemp)
acf2(gtemp)
# 3 GTEMP
plot.ts(gtemp)
acf2(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
log = log(gtemp)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(gtemp, 1, 1, 3)
sarima.for(gtemp, 20, 1, 1, 3)
# 4 JJ
plot.ts(jj)
acf2(jj)
# 4 JJ
plot.ts(jj)
acf2(jj)
diff = diff(jj)
plot.ts(diff)
acf2(diff)
# 1 SO2
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
# 2 OIL
plot.ts(oil)
acf2(oil)
diff = diff(oil)
plot.ts(diff)
install.packages('FitAR')
library(FitAR)
# 2 OIL
plot.ts(oil)
acf2(oil)
diff = diff(oil)
plot.ts(diff)
acf2(diff)
#log = log(oil)
#difflog = diff(log)
#plot.ts(difflog)
#acf2(difflog)
trans = boxcox(oil, interval=c(-1,1))
plot.ts(trans)
#log = log(oil)
#difflog = diff(log)
#plot.ts(difflog)
#acf2(difflog)
trans = BoxCox(oil, interval=c(-1,1))
plot.ts(trans)
#log = log(oil)
#difflog = diff(log)
#plot.ts(difflog)
#acf2(difflog)
trans = BoxCox(oil, interval=c(-1,1))
plot.ts(trans)
# 1 SO2
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
library(astsa)
library(FitAR)
# 1 SO2
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
sarima(so2, .06, 1, .14)
sarima.for(so2, .06, 3, 1, .14)
sarima.for(so2, 20, .06, 1, .14)
sarima(so2, 3, 1, 7)
sarima.for(so2, 20, 3, 1, 7)
# 2 OIL
plot.ts(oil)
acf2(oil)
diff = diff(oil)
plot.ts(diff)
acf2(diff)
log = log(oil)
difflog = diff(log)
plot.ts(difflog)
sqrt = sqrt(oil)
diffsqrt = diff(sqrt)
plot.ts(diffsqrt)
acf2(diffsqrt)
acf2(difflog)
sarima(oil, 1, 1, 3)
sarima(oil, 1, 1, 1)
sarima.for(oil, 20, 1, 1, 1)
# 1 SO2
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
sarima(so2, 3, 0, 7)
sarima.for(so2, 20, 3, 0, 7)
sarima(so2, 3, 1, 7)
sarima.for(so2, 20, 3, 1, 7)
# 3 GTEMP
plot.ts(gtemp)
acf2(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
# 3 GTEMP
plot.ts(gtemp)
acf2(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
# 4 JJ
plot.ts(jj)
acf2(jj)
diff = diff(jj)
plot.ts(diff)
acf2(diff)
log = log(jj)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(jj, 5,1,1, 1,1,3, 4)
sarima.for(jj, 20, 5,1,1, 1,1,3, 4)
sqrt = sqrt(oil)
diffsqrt = diff(sqrt)
plot.ts(diffsqrt)
sqrt = sqrt(jj)
diffsqrt = diff(sqrt)
plot.ts(diffsqrt)
acf2(diffsqrt)
sarima(jj, 5,1,1, 1,1,2, 4)
sarima.for(jj, 20, 5,1,1, 1,1,2, 4)
# 1 SO2
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
,
sarima(so2, 4, 1, 7)
sarima.for(so2, 20, 4, 1, 7)
# 2 OIL
plot.ts(oil)
acf2(oil)
diff = diff(oil)
plot.ts(diff)
acf2(diff)
log = log(oil)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)s
acf2(difflog)
sarima(oil, 1, 1, 3)
sarima.for(oil, 20, 1, 1, 3)
# 3 GTEMP
plot.ts(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
sarima(gtemp, 1, 1, 3)
sarima.for(gtemp, 20, 1, 1, 3)
# 4 JJ
plot.ts(jj)
acf2(jj)
diff = diff(jj)
plot.ts(diff)
acf2(diff)
log = log(jj)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(jj, 5,1,1, 1,1,3, 4)
acf2(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
sarima(so2, 4, 1, 7)
sarima.for(so2, 20, 4, 1, 7)
plot.ts(oil)
log = log(oil)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
log = log(oil)
plot.ts(log)
log = sqrt(oil)
plot.ts(log)
log = log(oil)
plot.ts(log)
acf2(log)
difflog = diff(log)
plot.ts(difflog)
acf2(diff)
difflog = diff(log)
plot.ts(difflog)
acf2(diff)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(oil, 1, 1, 3)
sarima.for(oil, 20, 1, 1, 3)
plot.ts(gtemp)
plot.ts(gtemp)
# 3 GTEMP
plot.ts(gtemp)
acf2(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
acf2(gtemp)
acf2(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
sarima(gtemp, 1, 1, 3)
sarima.for(gtemp, 20, 1, 1, 3)
sarima(so2, 7, 1, 4)
sarima.for(so2, 20, 7, 1, 4)
sarima(oil, 3, 1, 1)
sarima.for(oil, 20, 3, 1, 1)
sarima(gtemp, 3, 1, 1)
sarima.for(gtemp, 20, 3, 1, 1)
plot.ts(jj)
log = log(jj)
plot.ts(log)
acf2(log)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(oil, 1,1,5, 3,1,1, 4)
sarima.for(oil, 20, 1,1,5, 3,1,1, 4)
sarima(jj, 1,1,5, 3,1,1, 4)
sarima.for(jj, 20, 1,1,5, 3,1,1, 4)
sarima(log, 3, 1, 1)
sarima.for(oil, 20, 3, 1, 1)
sarima.for(log, 20, 3, 1, 1)
library(astsa)
plot.ts(so2)
acf2(so2)
diff = diff(so2)
plot.ts(diff)
acf2(diff)
sarima(so2, 7, 1, 4)
sarima.for(so2, 20, 7, 1, 4)
plot.ts(oil)
log = log(oil)
plot.ts(log)
acf2(log)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(log, 3, 1, 1)
sarima.for(log, 20, 3, 1, 1)
plot.ts(gtemp)
acf2(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
sarima(gtemp, 3, 1, 1)
sarima.for(gtemp, 20, 3, 1, 1)
plot.ts(jj)
log = log(jj)
plot.ts(log)
acf2(log)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(log)
sarima(log, 1,1,5, 3,1,1, 4)
sarima.for(log, 20, 1,1,5, 3,1,1, 4)
plot.ts(gtemp)
acf2(gtemp)
diff = diff(gtemp)
plot.ts(diff)
acf2(diff)
sarima(gtemp, 3, 1, 1)
plot.ts(jj)
log = log(jj)
plot.ts(log)
acf2(log)
difflog = diff(log)
plot.ts(difflog)
acf2(difflog)
sarima(log, 1,1,5, 3,1,1, 4)
load("~/Dropbox/3570-Final-Project/liamDataEnvironment.RData")
chicago <- get_map(location = 'chicago', zoom = 10)
ggmap(chicago) +
geom_point(data = finalData, mapping = aes(x = finalData$LONGITUDE, y = finalData$LATITUDE, color = finalData$CRIME_TYPE))+
labs(color = "Crime Type", x = "Longitude", y = "Latitude") +
ggtitle("Locations of Crime within Chicago")
library(ggmap)
chicago <- get_map(location = 'chicago', zoom = 10)
ggmap(chicago) +
geom_point(data = finalData, mapping = aes(x = finalData$LONGITUDE, y = finalData$LATITUDE, color = finalData$CRIME_TYPE))+
labs(color = "Crime Type", x = "Longitude", y = "Latitude") +
ggtitle("Locations of Crime within Chicago")
# Plot all crimes by type within Chicago
chicago <- get_map(location = 'Chicago', zoom = 10)
library(ggmap)
# Plot all crimes by type within Chicago
chicago <- get_map(location = 'Chicago', zoom = 10)
ggmap(chicago) +
geom_point(data = finalData, mapping = aes(x = finalData$LONGITUDE, y = finalData$LATITUDE, color = finalData$CRIME_TYPE))+
labs(color = "Crime Type", x = "Longitude", y = "Latitude") +
ggtitle("Locations of Crime within Chicago")
setwd("~/Dropbox/3570-Final-Project")
